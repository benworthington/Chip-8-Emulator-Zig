const std = @import("std");

const memorySize = 4096;

const fontset: [80]u8 = .{
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF8, 0x10, 0xF8, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
};

pub const Memory = struct {
    data: [memorySize]u8,

    pub fn init() Memory {
        var data: [memorySize]u8 = undefined;
        @memset(data[0..], 0);
        for (0..fontset.len) |i| {
            data[i + 0x50] = fontset[i];
        }
        return Memory{ .data = data };
    }

    pub fn loadRom(self: *Memory, romName: []const u8) !void {
        var romDir = try std.fs.cwd().openDir("src/roms", .{});
        defer romDir.close();

        var rom = try romDir.openFile(romName, .{});
        defer rom.close();

        const romStats = try rom.stat();

        if (romStats.size > memorySize - 0x200) {
            return error.ROMTooLarge;
        }

        var fr = rom.reader();
        _ = try fr.readAll(self.data[0x200 .. 0x200 + romStats.size]);
    }
};
